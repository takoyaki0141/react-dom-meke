public function fetchCloseProjects() {
    try {
        // contractor × project 基本情報を取得
        $sql = "
            SELECT
                p.project_id,
                p.project_name,
                p.due_date,
                p.created_at,
                c.contractor_id
            FROM
                project p
            INNER JOIN contractor c ON p.project_id = c.project_id AND c.is_deleted = 0
            WHERE
                p.progress_id = :progress_id
            ORDER BY
                p.due_date ASC
        ";
        $stmt = $this->dbh->prepare($sql);
        $stmt->execute([':progress_id' => 2]);
        $projectRows = $stmt->fetchAll(PDO::FETCH_ASSOC);

        // project_id → clients[] を取得して辞書化
        $stmtClients = $this->dbh->prepare("
            SELECT project_id, client_id, client_name
            FROM client
            WHERE is_deleted = 0
        ");
        $stmtClients->execute();
        $clientRows = $stmtClients->fetchAll(PDO::FETCH_ASSOC);

        $clientsByProject = [];
        foreach ($clientRows as $row) {
            $clientsByProject[$row['project_id']][] = [
                'client_id' => $row['client_id'],
                'client_name' => $row['client_name']
            ];
        }

        require_once('statisticClass.php');
        $statControl = new Statistic($this->db);
        $today = date('Y-m-d');
        $result = [];

        foreach ($projectRows as $p) {
            $contractorId = $p["contractor_id"];
            $projectId = $p["project_id"];

            if (isset($result[$contractorId][$projectId])) continue;

            $remainingDays = $statControl->calcLeftDays($p["due_date"], $today);
            $plannedMarginDays = $statControl->calcLeftDays($p["due_date"], $p["created_at"]);
            $remainingRate = ($plannedMarginDays != 0) ? $remainingDays / $plannedMarginDays : 0;

            $noticeMode = "";
            if ($remainingDays == 0) {
                $noticeMode = "today";
            } elseif ($remainingDays == 1) {
                $noticeMode = "tomorrow";
            } elseif ($remainingRate < 0.2 && $remainingDays >= 0) {
                $noticeMode = "close";
            } else {
                continue;
            }

            $result[$contractorId][$projectId] = [
                "project_id" => $projectId,
                "project_name" => $p["project_name"],
                "due_date" => $p["due_date"],
                "remaining_days" => $remainingDays,
                "planned_margin_days" => $plannedMarginDays,
                "remaining_days_rate" => $remainingRate,
                "notice_mode" => $noticeMode,
                "clients" => $clientsByProject[$projectId] ?? []
            ];
        }

        return $result;

    } catch (PDOException $e) {
        return ["status" => "error", "message" => "DB Error: " . $e->getMessage()];
    } catch (Exception $e) {
        return ["status" => "error", "message" => "General Error: " . $e->getMessage()];
    }
}



<?php

header('Content-type: application/json; charset=UTF-8');

require_once '../classes/projectClass.php';
require_once '../classes/database.php';

$config = require_once '../config/config.php';

$db = new DBconnect(
    $config['dbMain']['host'],
    $config['dbMain']['dbname'],
    $config['dbMain']['username'],
    $config['dbMain']['password']
);

$projectControl = new project($db);

$dmBotConfig = require_once '../config/dMConfig.php';
$botId = $dmBotConfig['bot_id'];
$apiKey = $dmBotConfig['api_key'];

try {
    $allP = $projectControl->fetchCloseProjects();

    foreach ($allP as $contractorId => $projects) {
        // if ($contractorId != 14202) continue;

        $grouped = [
            "today" => [],
            "tomorrow" => [],
            "close" => []
        ];

        foreach ($projects as $p) {
            $grouped[$p["notice_mode"]][] = $p;
        }

        $message = "ChaChatHTML;";

        foreach (["today", "tomorrow", "close"] as $mode) {
            if (count($grouped[$mode]) === 0) continue;

            $header = [
                "today" => "<b>本日が納期のプロジェクト一覧です</b><br><br>",
                "tomorrow" => "<b>翌営業日が納期のプロジェクト一覧です</b><br><br>",
                "close" => "<b>納期が近いプロジェクト一覧です</b><br><br>"
            ][$mode];

            $message .= "--------------------------<br>$header";

            foreach ($grouped[$mode] as $p) {
                $clientText = implode("、", array_map(fn($c) => $c["client_name"] . "(" . $c["client_id"] . ")", $p["clients"]));
                $href = "<b><a href=# name='https://mng.discojpn.com/backend/milestone/dmessage/redirect/Redirect.html?page=project&projectId={$p['project_id']}' target='_blank' onclick='OnButtonClick(this.textContent,this.name)'>{$p['project_name']}</a></b>";

                $message .= "案件名：$href<br>
                    納期：{$p['due_date']}<br>
                    残り日数：{$p['remaining_days']} 日<br>
                    依頼者：$clientText<br><br>";
            }
        }

        // Botルーム送信
        $output = $projectControl->createDmessageBOTRoom($contractorId);
        $roomId = $output->room_id;

        $param = [
            "message" => $message,
            "bot_user_id" => $botId,
            "room_id" => $roomId,
            "api_key" => $apiKey,
            "cast_type" => "uni",
            "owner_user_id" => "14202"
        ];

        botCurlExec($param);
    }

} catch (PDOException $e) {
    echo "error receiving dmessage: " . $e->getMessage();
}

function botCurlExec($param) {
    $curl = curl_init("https://dmessage.discojpn.com/util/bot_if.php");
    curl_setopt($curl, CURLOPT_POST, true);
    curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($param));
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);
    $output = curl_exec($curl);
    curl_close($curl);
}
